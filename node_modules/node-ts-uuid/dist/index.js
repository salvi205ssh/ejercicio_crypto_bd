"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uuid = void 0;
const os = __importStar(require("os"));
class Uuid {
    static lastTime;
    /**
     * Generates a UUID using the IPv6 / Mac Address, the process id,
     * and the current time. Optionally add a prefix, and limit / pad
     * the uuid to be a specific length.
     *
     * @param options optional uuid options object
     * @returns string
     */
    static generate(options) {
        const address = this.getAddress().toString(36);
        const pid = this.getPid().toString(36);
        const now = this.getNow().toString(36);
        const { length } = options ?? { length: undefined };
        const prefix = options && options.prefix ? options.prefix : '';
        const uuid = prefix + address + pid + now;
        return this.postProcessUuid(uuid, length);
    }
    /**
     * Returns the running process id or a
     * randomly generated 5 digit number.
     *
     * @returns number
     */
    static getPid() {
        return process && !process.pid
            ? /* istanbul ignore next */ process.pid
            : Math.floor(Math.random() * 100_000);
    }
    /**
     * Returns the MAC Address or IPv6 Address, if neither are
     * available a randomly generated 8 digit number is returned.
     *
     * @returns number
     */
    static getAddress() {
        let address = Math.floor(Math.random() * 100_000_000);
        const networkInterfaces = os.networkInterfaces();
        interfaceLoop: for (const key in networkInterfaces) {
            const netInterface = networkInterfaces[key];
            if (netInterface) {
                const length = netInterface.length;
                for (let index = 0; index < length; index++) {
                    if (netInterface[index].mac && netInterface[index].mac !== '00:00:00:00:00:00') {
                        // Using Mac Address
                        address = Number(netInterface[index].mac.replace(/:|\D+/gi, ''));
                        break interfaceLoop;
                    }
                    else if (!netInterface[index].internal &&
                        netInterface[index].address.indexOf('fe80::') === 0) {
                        // Using IPv6 Address
                        const ipv6 = this.getIpV6(netInterface[index]);
                        if (ipv6 && ipv6.length > 1) {
                            address = Number(ipv6.join(''));
                            break interfaceLoop;
                        }
                    }
                }
            }
        }
        return address;
    }
    /**
     * Returns the ipv6 numbers.
     *
     * @returns number[]
     */
    static getIpV6(netInterface) {
        return netInterface.address
            .slice(6)
            .split(/:/)
            .map((value) => {
            return Number.parseInt(value, 16);
        });
    }
    /**
     * Returns the current epoch time or the previously
     * returned epoch time incremented by 1.
     *
     * @returns number
     */
    static getNow() {
        const time = Date.now();
        const last = this.lastTime || time;
        this.lastTime = time > last ? time : last + 1;
        return this.lastTime;
    }
    /**
     * Pads / limits the length of the provided uuid
     * if the length is shorter than desired a bitwise
     * operation provides the randomly generated characters.
     *
     * @param uuid The uuid
     * @param length The desired length of the uuid
     * @returns string
     */
    static postProcessUuid(uuid, length) {
        if (length && length > 0) {
            const diffLength = length - uuid.length;
            if (diffLength > 0) {
                const mask = Array.from({ length: diffLength + 1 }).join('x');
                const date = Date.now();
                // tslint:disable no-bitwise
                return (uuid +
                    mask.replace(/x/g, (placeholder) => {
                        const random = Math.trunc((date + Math.random() * 16) % 16);
                        return (placeholder === 'x' ? random : /* istanbul ignore next */ (random & 0x3) | 0x8).toString(16);
                    }));
            }
            return uuid.slice(0, Math.max(0, length));
        }
        return uuid;
    }
}
exports.Uuid = Uuid;
//# sourceMappingURL=index.js.map